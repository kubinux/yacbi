#!python

"""
yacbi - Yet Another Clang-Based Indexer.

Copyright (C) 2014 Jakub Lewandowski <jakub.lewandowski@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import argparse
import logging
import os
import sys

import yacbi


def init(args):
    yacbi.initialize_project(args.root)


def index(args):
    stop_on_error = False
    rollback_on_error = False
    if args.rollback_on_error:
        stop_on_error = True
        rollback_on_error = True
    elif args.stop_on_error:
        stop_on_error = True
    yacbi.index(args.root,
                stop_on_error,
                rollback_on_error)


def setup_verbosity_args(parser):
    verbosity_group = parser.add_mutually_exclusive_group()
    verbosity_group.add_argument("-v", "--verbose", action="store_true")
    verbosity_group.add_argument("-d", "--debug", action="store_true")


def setup_init_args(subparsers):
    init_parser = subparsers.add_parser("init", help="initialize the index")
    init_parser.add_argument("--root",
                             help="project root (default is CWD)",
                             default=os.getcwd())
    init_parser.set_defaults(callback=init)


def setup_index_args(subparsers):
    index_parser = subparsers.add_parser("index", help="update the index")
    index_parser.add_argument(
        "--root",
        help="project root (default is CWD)",
        default=os.getcwd())
    on_error_group = index_parser.add_mutually_exclusive_group()
    on_error_group.add_argument(
        "--stop-on-error",
        help="stop when error occurs",
        action="store_true")
    on_error_group.add_argument(
        "--rollback-on-error",
        help="rollback the transaction when an error occurs",
        action="store_true")
    index_parser.set_defaults(callback=index)


def create_argument_parser():
    parser = argparse.ArgumentParser()
    setup_verbosity_args(parser)
    subparsers = parser.add_subparsers(dest="command", help="commands")
    setup_init_args(subparsers)
    setup_index_args(subparsers)
    return parser


def setup_logging(args):
    stderr_handler = logging.StreamHandler(sys.stderr)
    stderr_handler.setFormatter(logging.Formatter("%(levelname)s %(message)s"))
    log_level = logging.ERROR
    if args.verbose:
        log_level = logging.INFO
    elif args.debug:
        log_level = logging.DEBUG
    yacbi.logger.addHandler(stderr_handler)
    yacbi.logger.setLevel(log_level)


def main():
    arg_parser = create_argument_parser()
    args = arg_parser.parse_args()
    setup_logging(args)
    try:
        args.callback(args)
    except Exception, err:
        print >>sys.stderr, "{0}: error: {1}".format(arg_parser.prog, err)
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(main())
